"""Integration tests for Authentication endpoints."""

from uuid import uuid4

import pytest
from httpx import AsyncClient


@pytest.mark.asyncio
class TestAuthIntegration:
    """Integration tests for authentication operations."""

    async def test_register_creates_user_in_database(self, client: AsyncClient):
        """Test that registration creates a user that can be retrieved."""
        user_email = f"register_{uuid4().hex[:8]}@example.com"

        # Register user
        register_response = await client.post(
            "/api/v1/auth/register",
            json={
                "email": user_email,
                "password": "TestPassword123!",
                "full_name": "Test User",
            },
        )

        assert register_response.status_code == 201
        user_data = register_response.json()
        assert user_data["email"] == user_email
        assert "id" in user_data

        # Login with created user
        login_response = await client.post(
            "/api/v1/auth/login",
            json={"email": user_email, "password": "TestPassword123!"},
        )

        assert login_response.status_code == 200
        assert "access_token" in login_response.json()

    async def test_login_returns_valid_token(self, client: AsyncClient):
        """Test that login token can be used to access protected endpoints."""
        user_email = f"login_{uuid4().hex[:8]}@example.com"

        # Register user
        await client.post(
            "/api/v1/auth/register",
            json={
                "email": user_email,
                "password": "TestPassword123!",
                "full_name": "Login Test User",
            },
        )

        # Login
        login_response = await client.post(
            "/api/v1/auth/login",
            json={"email": user_email, "password": "TestPassword123!"},
        )

        token = login_response.json()["access_token"]

        # Use token to access protected endpoint
        me_response = await client.get(
            "/api/v1/auth/me", headers={"Authorization": f"Bearer {token}"}
        )

        assert me_response.status_code == 200
        assert me_response.json()["email"] == user_email

    async def test_invalid_credentials_rejected(self, client: AsyncClient):
        """Test that invalid credentials are properly rejected."""
        user_email = f"invalid_{uuid4().hex[:8]}@example.com"

        # Register user
        await client.post(
            "/api/v1/auth/register",
            json={
                "email": user_email,
                "password": "TestPassword123!",
                "full_name": "Invalid Test User",
            },
        )

        # Try login with wrong password
        login_response = await client.post(
            "/api/v1/auth/login",
            json={"email": user_email, "password": "WrongPassword123!"},
        )

        assert login_response.status_code == 401

    async def test_duplicate_registration_rejected(self, client: AsyncClient):
        """Test that duplicate email registration is rejected."""
        user_email = f"duplicate_{uuid4().hex[:8]}@example.com"

        # First registration
        first_response = await client.post(
            "/api/v1/auth/register",
            json={
                "email": user_email,
                "password": "TestPassword123!",
                "full_name": "First User",
            },
        )

        assert first_response.status_code == 201

        # Second registration with same email
        second_response = await client.post(
            "/api/v1/auth/register",
            json={
                "email": user_email,
                "password": "DifferentPassword123!",
                "full_name": "Second User",
            },
        )

        assert second_response.status_code == 400

    async def test_unauthorized_access_blocked(self, client: AsyncClient):
        """Test that protected endpoints require authentication."""
        # Try to access protected endpoint without token
        me_response = await client.get("/api/v1/auth/me")

        # API returns 403 Forbidden for missing token (instead of 401)
        assert me_response.status_code == 403

    async def test_invalid_token_rejected(self, client: AsyncClient):
        """Test that invalid tokens are rejected."""
        # Try with invalid token
        me_response = await client.get(
            "/api/v1/auth/me", headers={"Authorization": "Bearer invalid_token"}
        )

        assert me_response.status_code == 401

    async def test_user_permissions_assigned_correctly(self, client: AsyncClient):
        """Test that user permissions are properly assigned and persisted."""
        user_email = f"perms_{uuid4().hex[:8]}@example.com"

        # Register user
        await client.post(
            "/api/v1/auth/register",
            json={
                "email": user_email,
                "password": "TestPassword123!",
                "full_name": "Permissions Test User",
            },
        )

        # Login
        login_response = await client.post(
            "/api/v1/auth/login",
            json={"email": user_email, "password": "TestPassword123!"},
        )

        token = login_response.json()["access_token"]

        # Get user details
        me_response = await client.get(
            "/api/v1/auth/me", headers={"Authorization": f"Bearer {token}"}
        )

        user_data = me_response.json()
        assert "permissions" in user_data
        # New users should have default permissions
        assert isinstance(user_data["permissions"], list)

    async def test_password_not_exposed_in_responses(self, client: AsyncClient):
        """Test that password hashes are never exposed in API responses."""
        user_email = f"password_{uuid4().hex[:8]}@example.com"

        # Register user
        register_response = await client.post(
            "/api/v1/auth/register",
            json={
                "email": user_email,
                "password": "TestPassword123!",
                "full_name": "Password Test User",
            },
        )

        register_data = register_response.json()
        assert "password" not in register_data
        assert "password_hash" not in register_data

        # Login
        login_response = await client.post(
            "/api/v1/auth/login",
            json={"email": user_email, "password": "TestPassword123!"},
        )

        token = login_response.json()["access_token"]

        # Get user details
        me_response = await client.get(
            "/api/v1/auth/me", headers={"Authorization": f"Bearer {token}"}
        )

        me_data = me_response.json()
        assert "password" not in me_data
        assert "password_hash" not in me_data
