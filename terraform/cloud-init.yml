#cloud-config
# AreaMédica API - Cloud Init Configuration
# Initializes application server with Docker and application setup

package_update: true
package_upgrade: true

packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - lsb-release
  - software-properties-common
  - git
  - ufw
  - fail2ban

write_files:
  - path: /etc/environment
    content: |
      PROJECT_NAME=${project_name}
      ENVIRONMENT=${environment}
      POSTGRES_HOST=${postgres_host}
      POSTGRES_PORT=${postgres_port}
      POSTGRES_USER=${postgres_user}
      POSTGRES_PASSWORD=${postgres_password}
      POSTGRES_DB=${postgres_db}
      REDIS_HOST=${redis_host}
      REDIS_PORT=${redis_port}
      REDIS_PASSWORD=${redis_password}
    permissions: "0644"

  - path: /root/deploy.sh
    content: |
      #!/bin/bash
      set -e

      # Pull latest code from repository
      cd /opt/${project_name}
      git pull origin main

      # Build and restart containers
      docker-compose -f docker-compose.yml pull
      docker-compose -f docker-compose.yml up -d --build

      # Run database migrations
      docker-compose exec -T api alembic upgrade head

      # Cleanup old images
      docker image prune -f

      echo "Deployment completed successfully"
    permissions: "0755"

  - path: /etc/fail2ban/jail.local
    content: |
      [DEFAULT]
      bantime = 3600
      findtime = 600
      maxretry = 5

      [sshd]
      enabled = true
      port = ssh
      logpath = /var/log/auth.log
    permissions: "0644"

runcmd:
  # Install Docker
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update
  - apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

  # Install Docker Compose standalone
  - curl -L "https://github.com/docker/compose/releases/download/v${docker_compose_version}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  - chmod +x /usr/local/bin/docker-compose

  # Start and enable Docker
  - systemctl start docker
  - systemctl enable docker

  # Configure firewall
  - ufw default deny incoming
  - ufw default allow outgoing
  - ufw allow 22/tcp
  - ufw allow 8000/tcp
  - ufw allow 9090/tcp
  - ufw --force enable

  # Start fail2ban
  - systemctl enable fail2ban
  - systemctl start fail2ban

  # Create application directory
  - mkdir -p /opt/${project_name}
  - cd /opt/${project_name}

  # Clone repository (replace with actual repository URL)
  # - git clone https://github.com/your-org/${project_name}.git .

  # Create .env file from environment variables
  - |
    cat > /opt/${project_name}/.env <<EOF
    ENVIRONMENT=${environment}

    # Database
    POSTGRES_HOST=${postgres_host}
    POSTGRES_PORT=${postgres_port}
    POSTGRES_USER=${postgres_user}
    POSTGRES_PASSWORD=${postgres_password}
    POSTGRES_DB=${postgres_db}
    DATABASE_URL=postgresql+asyncpg://${postgres_user}:${postgres_password}@${postgres_host}:${postgres_port}/${postgres_db}

    # Redis
    REDIS_HOST=${redis_host}
    REDIS_PORT=${redis_port}
    REDIS_PASSWORD=${redis_password}
    REDIS_URL=redis://default:${redis_password}@${redis_host}:${redis_port}/0

    # API Settings
    SECRET_KEY=$(openssl rand -hex 32)
    API_V1_PREFIX=/api/v1

    # Banesco OAuth2 (set in production)
    BANESCO_TOKEN_URL=https://api.banesco.com/oauth/token
    BANESCO_CLIENT_ID=your_client_id
    BANESCO_CLIENT_SECRET=your_client_secret
    BANESCO_API_URL=https://api.banesco.com

    # CORS
    CORS_ORIGINS=https://yourdomain.com

    # Logging
    LOG_LEVEL=INFO
    JSON_LOGS=true
    EOF

  # Set permissions
  - chmod 600 /opt/${project_name}/.env
  - chown -R root:root /opt/${project_name}

  # Install Prometheus Node Exporter
  - wget https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz
  - tar xvfz node_exporter-1.6.1.linux-amd64.tar.gz
  - cp node_exporter-1.6.1.linux-amd64/node_exporter /usr/local/bin/
  - useradd -rs /bin/false node_exporter
  - |
    cat > /etc/systemd/system/node_exporter.service <<EOF
    [Unit]
    Description=Node Exporter
    After=network.target

    [Service]
    User=node_exporter
    Group=node_exporter
    Type=simple
    ExecStart=/usr/local/bin/node_exporter

    [Install]
    WantedBy=multi-user.target
    EOF
  - systemctl daemon-reload
  - systemctl start node_exporter
  - systemctl enable node_exporter

  # Start application
  # - cd /opt/${project_name}
  # - docker-compose up -d

final_message: "AreaMédica API server initialized successfully after $UPTIME seconds"

power_state:
  mode: reboot
  timeout: 300
  condition: true
